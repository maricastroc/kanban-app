generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id               String          @id @default(uuid())
  name             String
  email            String          @unique
  password         String?
  avatarUrl        String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  accounts          Account[]
  sessions          Session[]
  boards           Board[]
  theme            Theme?

  @@map("users")
}

model Board {
  id      String   @id @default(uuid())
  name    String
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  columns Column[]
  isActive  Boolean  @default(false) 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("boards")
}

model Column {
  id      String   @id @default(uuid())
  name    String
  boardId String
  board   Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks   Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
  @@map("columns")
}

model Task {
  id          String   @id @default(uuid())
  order       Int
  title       String
  status      String
  description String?
  columnId    String
  column      Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  subtasks    Subtask[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([columnId])
  @@map("tasks")
}

model Subtask {
  id          String  @id @default(uuid())
  order       Int
  title       String
  isCompleted Boolean @default(false)
  taskId      String
  task        Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@map("subtasks")
}

model Theme {
  id         String  @id @default(uuid())
  userId     String  @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isDarkMode Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("theme")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}